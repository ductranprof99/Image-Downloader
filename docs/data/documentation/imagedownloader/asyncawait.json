{"metadata":{"role":"collectionGroup","title":"Async\/Await Support","modules":[{"name":"ImageDownloader"}],"roleHeading":"API Collection"},"hierarchy":{"paths":[["doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader"]]},"abstract":[{"text":"Use modern Swift concurrency with async\/await APIs.","type":"text"}],"kind":"article","seeAlsoSections":[{"anchor":"Essentials","identifiers":["doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/GettingStarted","doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/Configuration"],"generated":true,"title":"Essentials"}],"sections":[],"topicSections":[{"anchor":"Core-Types","identifiers":["doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageDownloaderManager","doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageResult","doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageDownloaderError"],"title":"Core Types"},{"anchor":"Related","identifiers":["doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/GettingStarted","doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/Configuration"],"title":"Related"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"ImageDownloader is built with Swift concurrency, offering clean async\/await APIs alongside traditional completion handlers. All async methods are available on iOS 13.0+ and macOS 10.15+.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Basic Usage","anchor":"Basic-Usage","type":"heading"},{"level":3,"text":"Simple Image Request","anchor":"Simple-Image-Request","type":"heading"},{"type":"codeListing","code":["import ImageDownloader","","func loadImage() async {","    do {","        let result = try await ImageDownloaderManager.shared.requestImage(at: imageURL)","        imageView.image = result.image","","        \/\/ Check source","        if result.fromCache {","            print(\"✓ Loaded from memory cache\")","        } else if result.fromStorage {","            print(\"✓ Loaded from disk storage\")","        } else {","            print(\"✓ Downloaded from network\")","        }","    } catch {","        print(\"Error: \\(error)\")","    }","}"],"syntax":"swift"},{"level":3,"text":"With Progress Tracking","anchor":"With-Progress-Tracking","type":"heading"},{"type":"codeListing","code":["func loadImageWithProgress() async {","    do {","        let result = try await ImageDownloaderManager.shared.requestImage(","            at: imageURL,","            priority: .high,","            progress: { progress in","                \/\/ Called on main queue","                self.progressView.progress = Float(progress)","                print(\"Progress: \\(Int(progress * 100))%\")","            }","        )","","        imageView.image = result.image","    } catch {","        handleError(error)","    }","}"],"syntax":"swift"},{"level":2,"text":"Error Handling","anchor":"Error-Handling","type":"heading"},{"level":3,"text":"Typed Errors","anchor":"Typed-Errors","type":"heading"},{"inlineContent":[{"text":"All async methods throw ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageDownloaderError"},{"text":" for precise error handling:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["do {","    let result = try await manager.requestImage(at: url)","    imageView.image = result.image","} catch let error as ImageDownloaderError {","    switch error {","    case .invalidURL:","        showError(\"Invalid image URL\")","","    case .networkError(let underlyingError):","        showError(\"Network failed: \\(underlyingError.localizedDescription)\")","","    case .decodingFailed:","        showError(\"Could not decode image\")","","    case .cancelled:","        print(\"Download cancelled\")","","    case .timeout:","        showError(\"Request timed out\")","","    case .notFound:","        showError(\"Image not found\")","","    case .unknown(let underlyingError):","        showError(\"Unknown error: \\(underlyingError.localizedDescription)\")","    }","}"],"syntax":"swift"},{"level":2,"text":"Task Management","anchor":"Task-Management","type":"heading"},{"level":3,"text":"Cancellation","anchor":"Cancellation","type":"heading"},{"inlineContent":[{"text":"Use Swift’s ","type":"text"},{"type":"codeVoice","code":"Task"},{"text":" for cancellable downloads:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class ImageViewController: UIViewController {","    private var downloadTask: Task<Void, Never>?","","    func startDownload() {","        downloadTask = Task {","            do {","                let result = try await ImageDownloaderManager.shared.requestImage(at: url)","                imageView.image = result.image","            } catch is CancellationError {","                print(\"Download cancelled\")","            } catch {","                handleError(error)","            }","        }","    }","","    func cancelDownload() {","        downloadTask?.cancel()","    }","","    override func viewWillDisappear(_ animated: Bool) {","        super.viewWillDisappear(animated)","        cancelDownload()  \/\/ Auto-cancel on dismiss","    }","}"],"syntax":"swift"},{"level":3,"text":"Multiple Concurrent Downloads","anchor":"Multiple-Concurrent-Downloads","type":"heading"},{"inlineContent":[{"type":"text","text":"Download multiple images in parallel:"}],"type":"paragraph"},{"type":"codeListing","code":["func loadGallery(urls: [URL]) async {","    await withTaskGroup(of: ImageResult?.self) { group in","        for url in urls {","            group.addTask {","                try? await ImageDownloaderManager.shared.requestImage(at: url)","            }","        }","","        var images: [UIImage] = []","        for await result in group {","            if let result = result {","                images.append(result.image)","            }","        }","","        updateGallery(with: images)","    }","}"],"syntax":"swift"},{"level":2,"text":"Force Reload","anchor":"Force-Reload","type":"heading"},{"inlineContent":[{"type":"text","text":"Bypass cache and storage to force network download:"}],"type":"paragraph"},{"type":"codeListing","code":["func refreshImage() async {","    do {","        let result = try await ImageDownloaderManager.shared.forceReloadImage(","            at: imageURL,","            priority: .high","        )","        imageView.image = result.image","    } catch {","        handleError(error)","    }","}"],"syntax":"swift"},{"level":2,"text":"Priority-Based Loading","anchor":"Priority-Based-Loading","type":"heading"},{"inlineContent":[{"type":"text","text":"Use priority to control download order:"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ High priority (loaded first)","Task {","    let heroImage = try await manager.requestImage(","        at: heroURL,","        priority: .high","    )","    heroImageView.image = heroImage.image","}","","\/\/ Low priority (loaded later)","Task {","    let thumbnail = try await manager.requestImage(","        at: thumbnailURL,","        priority: .low","    )","    thumbnailView.image = thumbnail.image","}"],"syntax":"swift"},{"level":2,"text":"Integration with SwiftUI","anchor":"Integration-with-SwiftUI","type":"heading"},{"inlineContent":[{"type":"text","text":"Use async\/await directly in SwiftUI views:"}],"type":"paragraph"},{"type":"codeListing","code":["import SwiftUI","import ImageDownloader","","struct ContentView: View {","    @State private var image: UIImage?","    let imageURL: URL","","    var body: some View {","        Group {","            if let image = image {","                Image(uiImage: image)","                    .resizable()","                    .aspectRatio(contentMode: .fit)","            } else {","                ProgressView()","            }","        }","        .task {","            do {","                let result = try await ImageDownloaderManager.shared.requestImage(at: imageURL)","                image = result.image","            } catch {","                print(\"Error: \\(error)\")","            }","        }","    }","}"],"syntax":"swift"},{"level":2,"text":"Comparison: Async\/Await vs Completion Handlers","anchor":"Comparison-AsyncAwait-vs-Completion-Handlers","type":"heading"},{"level":3,"text":"Async\/Await (Recommended)","anchor":"AsyncAwait-Recommended","type":"heading"},{"type":"codeListing","code":["\/\/ ✅ Clean, readable, easy to follow","do {","    let result = try await manager.requestImage(at: url1)","    imageView1.image = result.image","","    let result2 = try await manager.requestImage(at: url2)","    imageView2.image = result2.image","","    let result3 = try await manager.requestImage(at: url3)","    imageView3.image = result3.image","} catch {","    handleError(error)","}"],"syntax":"swift"},{"level":3,"text":"Completion Handlers (Legacy)","anchor":"Completion-Handlers-Legacy","type":"heading"},{"type":"codeListing","code":["\/\/ ⚠️ Callback pyramid, harder to read","manager.requestImage(at: url1) { image1, error1, _, _ in","    if let image1 = image1 {","        self.imageView1.image = image1","","        self.manager.requestImage(at: url2) { image2, error2, _, _ in","            if let image2 = image2 {","                self.imageView2.image = image2","","                self.manager.requestImage(at: url3) { image3, error3, _, _ in","                    if let image3 = image3 {","                        self.imageView3.image = image3","                    }","                }","            }","        }","    }","}"],"syntax":"swift"},{"level":2,"text":"Best Practices","anchor":"Best-Practices","type":"heading"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Use Task for Cancellation","type":"text"}]}],"type":"paragraph"},{"syntax":"swift","code":["let task = Task { try await downloadImage() }","\/\/ Cancel when needed: task.cancel()"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Handle Errors Properly"}]}]},{"type":"codeListing","syntax":"swift","code":["catch let error as ImageDownloaderError { \/* Handle *\/ }"]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Leverage Structured Concurrency"}],"type":"strong"}],"type":"paragraph"},{"code":["async let image1 = manager.requestImage(at: url1)","async let image2 = manager.requestImage(at: url2)","let results = try await [image1, image2]"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Cancel on Dismiss","type":"text"}]}],"type":"paragraph"},{"code":["override func viewWillDisappear(_ animated: Bool) {","    downloadTask?.cancel()","}"],"type":"codeListing","syntax":"swift"}]}]}]}],"variants":[{"paths":["\/documentation\/imagedownloader\/asyncawait"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/AsyncAwait"},"references":{"doc://imagedownloadercontroller.ImageDownloader/documentation/ImageDownloader/ImageResult":{"url":"\/documentation\/imagedownloader\/imageresult","type":"topic","navigatorTitle":[{"text":"ImageResult","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ImageResult","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageResult","title":"ImageResult","abstract":[{"text":"Result of an image download operation (Swift-only)","type":"text"}]},"doc://imagedownloadercontroller.ImageDownloader/documentation/ImageDownloader/ImageDownloaderError":{"type":"topic","url":"\/documentation\/imagedownloader\/imagedownloadererror","kind":"symbol","abstract":[{"text":"Errors that can occur during image downloading","type":"text"}],"identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageDownloaderError","role":"symbol","title":"ImageDownloaderError","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImageDownloaderError"}],"navigatorTitle":[{"kind":"identifier","text":"ImageDownloaderError"}]},"doc://imagedownloadercontroller.ImageDownloader/documentation/ImageDownloader/ImageDownloaderManager":{"role":"symbol","identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/ImageDownloaderManager","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ImageDownloaderManager","kind":"identifier"}],"url":"\/documentation\/imagedownloader\/imagedownloadermanager","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ImageDownloaderManager","kind":"identifier"}],"title":"ImageDownloaderManager"},"doc://imagedownloadercontroller.ImageDownloader/documentation/ImageDownloader/GettingStarted":{"title":"Getting Started","type":"topic","kind":"article","url":"\/documentation\/imagedownloader\/gettingstarted","abstract":[{"text":"Download and cache images with just a few lines of code.","type":"text"}],"identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/GettingStarted","role":"article"},"doc://imagedownloadercontroller.ImageDownloader/documentation/ImageDownloader":{"role":"collection","abstract":[{"type":"text","text":"A powerful, production-ready Swift image downloading library with advanced caching, async\/await support, and full customization."}],"title":"ImageDownloader","identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader","type":"topic","kind":"symbol","url":"\/documentation\/imagedownloader"},"doc://imagedownloadercontroller.ImageDownloader/documentation/ImageDownloader/Configuration":{"abstract":[{"type":"text","text":"Configure ImageDownloader behavior globally or per-request."}],"url":"\/documentation\/imagedownloader\/configuration","role":"collectionGroup","identifier":"doc:\/\/imagedownloadercontroller.ImageDownloader\/documentation\/ImageDownloader\/Configuration","title":"Configuration","kind":"article","type":"topic"}}}